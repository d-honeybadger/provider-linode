/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SshkeyObservation struct {

	// The date this SSH Key was created.
	// The date this key was added.
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SshkeyParameters struct {

	// A label for the SSH Key.
	// The label of the Linode SSH Key.
	// +kubebuilder:validation:Required
	Label *string `json:"label" tf:"label,omitempty"`

	// The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
	// The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
	// +kubebuilder:validation:Required
	SSHKey *string `json:"sshKey" tf:"ssh_key,omitempty"`
}

// SshkeySpec defines the desired state of Sshkey
type SshkeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SshkeyParameters `json:"forProvider"`
}

// SshkeyStatus defines the observed state of Sshkey.
type SshkeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SshkeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Sshkey is the Schema for the Sshkeys API. Manages a Linode SSH Key.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type Sshkey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SshkeySpec   `json:"spec"`
	Status            SshkeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SshkeyList contains a list of Sshkeys
type SshkeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Sshkey `json:"items"`
}

// Repository type metadata.
var (
	Sshkey_Kind             = "Sshkey"
	Sshkey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Sshkey_Kind}.String()
	Sshkey_KindAPIVersion   = Sshkey_Kind + "." + CRDGroupVersion.String()
	Sshkey_GroupVersionKind = CRDGroupVersion.WithKind(Sshkey_Kind)
)

func init() {
	SchemeBuilder.Register(&Sshkey{}, &SshkeyList{})
}
