/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	_v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SharedIpsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SharedIpsParameters struct {

	// The set of IPs to share with the Linode.
	// A set of IP addresses to share to the Linode
	// +kubebuilder:validation:Required
	Addresses []*string `json:"addresses" tf:"addresses,omitempty"`

	// The ID of the Linode to share the IPs to.
	// The ID of the Linode to share these IP addresses with.
	// +kubebuilder:validation:Required
	LinodeID *float64 `json:"linodeId" tf:"linode_id,omitempty"`
}

// SharedIpsSpec defines the desired state of SharedIps
type SharedIpsSpec struct {
	_v1.ResourceSpec `json:",inline"`
	ForProvider      SharedIpsParameters `json:"forProvider"`
}

// SharedIpsStatus defines the observed state of SharedIps.
type SharedIpsStatus struct {
	_v1.ResourceStatus `json:",inline"`
	AtProvider         SharedIpsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SharedIps is the Schema for the SharedIpss API. Manages IP addresses shared to a Linode.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type SharedIps struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SharedIpsSpec   `json:"spec"`
	Status            SharedIpsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SharedIpsList contains a list of SharedIpss
type SharedIpsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SharedIps `json:"items"`
}

// Repository type metadata.
var (
	SharedIps_Kind             = "SharedIps"
	SharedIps_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SharedIps_Kind}.String()
	SharedIps_KindAPIVersion   = SharedIps_Kind + "." + CRDGroupVersion.String()
	SharedIps_GroupVersionKind = CRDGroupVersion.WithKind(SharedIps_Kind)
)

func init() {
	SchemeBuilder.Register(&SharedIps{}, &SharedIpsList{})
}
