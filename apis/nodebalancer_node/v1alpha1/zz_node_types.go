/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	_v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The current status of this node, based on the configured checks of its NodeBalancer Config. (unknown, UP, DOWN).
	// The current status of this node, based on the configured checks of its NodeBalancer Config. (unknown, UP, DOWN)
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NodeParameters struct {

	// The private IP Address where this backend can be reached. This must be a private IP address.
	// The private IP Address and port (IP:PORT) where this backend can be reached. This must be a private IP address.
	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// The ID of the NodeBalancerConfig to access.
	// The ID of the NodeBalancerConfig to access.
	// +kubebuilder:validation:Required
	ConfigID *float64 `json:"configId" tf:"config_id,omitempty"`

	// The label of the Linode NodeBalancer Node. This is for display purposes only.
	// The label for this node. This is for display purposes only.
	// +kubebuilder:validation:Required
	Label *string `json:"label" tf:"label,omitempty"`

	// The mode this NodeBalancer should use when sending traffic to this backend. If set to accept this backend is accepting traffic. If set to reject this backend will not receive traffic. If set to drain this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (accept, reject, drain, backup)
	// The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. If set to `backup` this backend will only accept traffic if all other nodes are down.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The ID of the NodeBalancer to access.
	// The ID of the NodeBalancer to access.
	// +kubebuilder:validation:Required
	NodebalancerID *float64 `json:"nodebalancerId" tf:"nodebalancer_id,omitempty"`

	// Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
	// Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255)
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// NodeSpec defines the desired state of Node
type NodeSpec struct {
	_v1.ResourceSpec `json:",inline"`
	ForProvider      NodeParameters `json:"forProvider"`
}

// NodeStatus defines the observed state of Node.
type NodeStatus struct {
	_v1.ResourceStatus `json:",inline"`
	AtProvider         NodeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Node is the Schema for the Nodes API. Manages a Linode NodeBalancer Node.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type Node struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodeSpec   `json:"spec"`
	Status            NodeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodeList contains a list of Nodes
type NodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Node `json:"items"`
}

// Repository type metadata.
var (
	Node_Kind             = "Node"
	Node_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Node_Kind}.String()
	Node_KindAPIVersion   = Node_Kind + "." + CRDGroupVersion.String()
	Node_GroupVersionKind = CRDGroupVersion.WithKind(Node_Kind)
)

func init() {
	SchemeBuilder.Register(&Node{}, &NodeList{})
}
