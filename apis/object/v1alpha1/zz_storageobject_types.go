/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageObjectObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique version ID value for the object.
	// The version ID of this object.
	VersionID *string `json:"versionId,omitempty" tf:"version_id,omitempty"`
}

type StorageObjectParameters struct {

	// The canned ACL to apply. (private, public-read, authenticated-read, public-read-write, custom) (defaults to private).
	// The ACL config given to this object.
	// +kubebuilder:validation:Optional
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// The access key to authenticate with.
	// The S3 access key with access to the target bucket.
	// +kubebuilder:validation:Required
	AccessKey *string `json:"accessKey" tf:"access_key,omitempty"`

	// The name of the bucket to put the object in.
	// The target bucket to put this object in.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Specifies caching behavior along the request/reply chain Read w3c cache_control for further details.
	// This cache_control configuration of this object.
	// +kubebuilder:validation:Optional
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control,omitempty"`

	// The cluster the bucket is in.
	// The target cluster that the bucket is in.
	// +kubebuilder:validation:Required
	Cluster *string `json:"cluster" tf:"cluster,omitempty"`

	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	// The contents of the Object to upload.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the gzipbase64 function with small text strings. For larger objects, use source to stream the content from a disk file.
	// The base64 contents of the Object to upload.
	// +kubebuilder:validation:Optional
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	// Specifies presentational information for the object. Read w3c content_disposition for further information.
	// The content disposition configuration of this object.
	// +kubebuilder:validation:Optional
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition,omitempty"`

	// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read w3c content encoding for further information.
	// The encoding of the content of this object.
	// +kubebuilder:validation:Optional
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding,omitempty"`

	// The language the content is in e.g. en-US or en-GB.
	// The language metadata of this object.
	// +kubebuilder:validation:Optional
	ContentLanguage *string `json:"contentLanguage,omitempty" tf:"content_language,omitempty"`

	// A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input.
	// The MIME type of the content.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// Used to trigger updates.11.11.11 or earlier).
	// The specific version of this object.
	// +kubebuilder:validation:Optional
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// Allow the object to be deleted regardless of any legal hold or object lock (defaults to false).
	// Whether the object should bypass deletion restrictions.
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// They name of the object once it is in the bucket.
	// The name of the uploaded object.
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// A map of keys/values to provision metadata.
	// The metadata of this object
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The secret key to authenitcate with.
	// The S3 secret key with access to the target bucket.
	// +kubebuilder:validation:Required
	SecretKey *string `json:"secretKey" tf:"secret_key,omitempty"`

	// The path to a file that will be read and uploaded as raw bytes for the object content. The path must either be relative to the root module or absolute.
	// The source file to upload.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Specifies a target URL for website redirect.
	// The website redirect location of this object.
	// +kubebuilder:validation:Optional
	WebsiteRedirect *string `json:"websiteRedirect,omitempty" tf:"website_redirect,omitempty"`
}

// StorageObjectSpec defines the desired state of StorageObject
type StorageObjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageObjectParameters `json:"forProvider"`
}

// StorageObjectStatus defines the observed state of StorageObject.
type StorageObjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageObjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageObject is the Schema for the StorageObjects API. Manages a Linode Object Storage Object.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type StorageObject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageObjectSpec   `json:"spec"`
	Status            StorageObjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageObjectList contains a list of StorageObjects
type StorageObjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageObject `json:"items"`
}

// Repository type metadata.
var (
	StorageObject_Kind             = "StorageObject"
	StorageObject_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageObject_Kind}.String()
	StorageObject_KindAPIVersion   = StorageObject_Kind + "." + CRDGroupVersion.String()
	StorageObject_GroupVersionKind = CRDGroupVersion.WithKind(StorageObject_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageObject{}, &StorageObjectList{})
}
