/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessControlsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccessControlsParameters struct {

	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
	// +kubebuilder:validation:Required
	AllowList []*string `json:"allowList" tf:"allow_list,omitempty"`

	// The unique ID of the target database.
	// The ID of the database to manage the allow list for.
	// +kubebuilder:validation:Required
	DatabaseID *float64 `json:"databaseId" tf:"database_id,omitempty"`

	// The unique type of the target database. (mysql, mongodb, postgresql)
	// The type of the  database to manage the allow list for.
	// +kubebuilder:validation:Required
	DatabaseType *string `json:"databaseType" tf:"database_type,omitempty"`
}

// AccessControlsSpec defines the desired state of AccessControls
type AccessControlsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessControlsParameters `json:"forProvider"`
}

// AccessControlsStatus defines the observed state of AccessControls.
type AccessControlsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessControlsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessControls is the Schema for the AccessControlss API. Manages the access controls for a Linode Database.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,linode}
type AccessControls struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessControlsSpec   `json:"spec"`
	Status            AccessControlsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessControlsList contains a list of AccessControlss
type AccessControlsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessControls `json:"items"`
}

// Repository type metadata.
var (
	AccessControls_Kind             = "AccessControls"
	AccessControls_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessControls_Kind}.String()
	AccessControls_KindAPIVersion   = AccessControls_Kind + "." + CRDGroupVersion.String()
	AccessControls_GroupVersionKind = CRDGroupVersion.WithKind(AccessControls_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessControls{}, &AccessControlsList{})
}
